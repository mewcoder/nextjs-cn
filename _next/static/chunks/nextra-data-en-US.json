{"/docs/getting-started/installation":{"title":"Installation","data":{"":"System Requirements:\nNode.js 16.14 or later.\nmacOS, Windows (including WSL), and Linux are supported.","automatic-installation#Automatic Installation":"We recommend starting a new Next.js app using create-next-app, which sets up everything automatically for you. To create a project, run:\nnpx create-next-app@latest\nOn installation, you'll see the following prompts:\nWhat is your project named? my-app\nWould you like to use TypeScript? No / Yes\nWould you like to use ESLint? No / Yes\nWould you like to use Tailwind CSS? No / Yes\nWould you like to use `src/` directory? No / Yes\nWould you like to use App Router? (recommended) No / Yes\nWould you like to customize the default import alias? No / Yes\nWhat import alias would you like configured? @/*\nAfter the prompts, create-next-app will create a folder with your project name and install the required dependencies.\nGood to know:\nNext.js now ships with TypeScript, ESLint, and Tailwind CSS configuration by default.\nYou can optionally use a src directory in the root of your project to separate your application's code from configuration files.","manual-installation#Manual Installation":"To manually create a new Next.js app, install the required packages:\nnpm install next@latest react@latest react-dom@latest\nOpen your package.json file and add the following scripts:\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}\nThese scripts refer to the different stages of developing an application:\ndev: runs next dev to start Next.js in development mode.\nbuild: runs next build to build the application for production usage.\nstart: runs next start to start a Next.js production server.\nlint: runs next lint to set up Next.js' built-in ESLint configuration.","creating-directories#Creating directories":"Next.js uses file-system routing, which means the routes in your application are determined by how you structure your files.","the-app-directory#The app directory":"For new applications, we recommend using the App Router. This router allows you to use React's latest features and is an evolution of the Pages Router based on community feedback.Create an app/ folder, then add a layout.tsx and page.tsx file. These will be rendered when the user visits the root of your application (/).Create a root layout inside app/layout.tsx with the required <html> and <body> tags:\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\nFinally, create a home page app/page.tsx with some initial content:\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\nGood to know: If you forget to create layout.tsx, Next.js will automatically create this file when running the development server with next dev.\nLearn more about using the App Router.","the-pages-directory-optional#The pages directory (optional)":"If you prefer to use the Pages Router instead of the App Router, you can create a pages/ directory at the root of your project.Then, add an index.tsx file inside your pages folder. This will be your home page (/):\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\nNext, add an _app.tsx file inside pages/ to define the global layout. Learn more about the custom App file).\nimport type { AppProps } from 'next/app'\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\nFinally, add a _document.tsx file inside pages/ to control the initial response from the server. Learn more about the custom Document file.\nimport { Html, Head, Main, NextScript } from 'next/document'\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\nLearn more about using the Pages Router.\nGood to know: Although you can use both routers in the same project, routes in app will be prioritized over pages. We recommend using only one router in your new project to avoid confusion.","the-public-folder-optional#The public folder (optional)":"Create a public folder to store static assets such as images, fonts, etc. Files inside public directory can then be referenced by your code starting from the base URL (/).","run-the-development-server#Run the Development Server":"Run npm run dev to start the development server.\nVisit http://localhost:3000 to view your application.\nEdit app/layout.tsx (or pages/index.tsx) file and save it to see the updated result in your browser."}},"/docs/getting-started/project-structure":{"title":"Next.js 项目结构","data":{"":"本页概述了 Next.js 项目的文件和文件夹结构。它包括顶层文件和文件夹、配置文件以及应用程序和页面目录中的路由约定。","顶层文件夹#顶层文件夹":"app\tApp Router\tpages\tPages Router\tpublic\t静态资源\tsrc\t可选的 src 文件夹","顶层文件#顶层文件":"Next.js\t\tnext.config.js\tNext.js 配置文件\tpackage.json\t项目依赖和脚本\tinstrumentation.ts\tOpenTelemetry and Instrumentation file\tmiddleware.ts\tNext.js 请求中间件\t.env\t环境变量\t.env.local\t本地环境变量\t.env.production\t生产环境变量\t.env.development\t开发环境变量\t.eslintrc.json\tESLint 配置文件\t.gitignore\tGit 忽略配置文件\t.next-env.d.ts\tNext.js TypeScript 声明文件\ttsconfig.json\tTypeScript 配置文件\tjsconfig.json\tJavaScript 配置文件\tpostcss.config.js\tTailwind CSS 配置文件","app-路由约定#app 路由约定":"","路由文件#路由文件":"layout\t.js .jsx .tsx\t布局\tpage\t.js .jsx .tsx\t页面\tloading\t.js .jsx .tsx\t加载页面\tnot-found\t.js .jsx .tsx\t404 页面\terror\t.js .jsx .tsx\t错误 页面\tglobal-error\t.js .jsx .tsx\t全局 页面\troute\t.js .ts\tAPI endpoint\ttemplate\t.js .jsx .tsx\t重新渲染的布局\tdefault\t.js .jsx .tsx\t并行路由回退页面","嵌套路由#嵌套路由":"folder\t路由段\tfolder/folder\t嵌套路由段","动态路由#动态路由":"[folder]\t动态路由段\t[...folder]\t全匹配路由段\t[[...folder]]\t可选全匹配路由段","路由分组和私有文件夹#路由分组和私有文件夹":"(folder)\t对路由进行分组而不影响路由本身\t_folder\t将文件夹和所有子段标记为私有的,不参与路由匹配","并行和拦截路由#并行和拦截路由":"@folder\t命名插槽\t(.)folder\t拦截同级路由\t(..)folder\t拦截上一级路由\t(..)(..)folder\t拦截上两级路由\t(...)folder\t从根路由开始拦截","metadata-文件约定#Metadata 文件约定":"","应用图标#应用图标":"favicon\t.ico\t网站图标文件\ticon\t.ico .jpg .jpeg .png .svg\t应用图标文件\ticon\t.js .ts .tsx\t生成的应用图标文件\tapple-icon\t.jpg .jpeg, .png\tApple 应用图标文件\tapple-icon\t.js .ts .tsx\t生成的 Apple 应用图标文件","open-graph-and-twitter-图片#Open Graph and Twitter 图片":"opengraph-image\t.jpg .jpeg .png .gif\tOpen Graph 图片文件\topengraph-image\t.js .ts .tsx\t生成的 Open Graph 图片文件\ttwitter-image\t.jpg .jpeg .png .gif\tTwitter 图片文件\ttwitter-image\t.js .ts .tsx\t生成的 Twitter 图片文件","seo#SEO":"sitemap\t.xml\tSitemap 文件\tsitemap\t.js .ts\t生成的 Sitemap 文件\trobots\t.txt\tRobots 文件\trobots\t.js .ts\t生成的 Robots 文件","pages-路由约定#pages 路由约定":"","特殊文件#特殊文件":"_app\t.js .jsx .tsx\t定制 App\t_document\t.js .jsx .tsx\t定制 Document\t_error\t.js .jsx .tsx\t定制 错误页面\t404\t.js .jsx .tsx\t404 错误页面\t500\t.js .jsx .tsx\t500 错误页面","路由#路由":"文件夹约定\t\t\tindex\t.js .jsx .tsx\t主页面\tfolder/index\t.js .jsx .tsx\t嵌套页面\t文件约定\t\t\tindex\t.js .jsx .tsx\t主页面\tfile\t.js .jsx .tsx\t嵌套页面","动态路由-1#动态路由":"文件夹约定\t\t\t[folder]/index\t.js .jsx .tsx\t动态路由段\t[...folder]/index\t.js .jsx .tsx\t全捕获路由段\t[[...folder]]/index\t.js .jsx .tsx\t可选全捕获路由段\t文件约定\t\t\t[file]\t.js .jsx .tsx\t动态路由段\t[...file]\t.js .jsx .tsx\t全捕获路由段\t[[...file]]\t.js .jsx .tsx\t可选全捕获路由段"}},"/docs":{"title":"简介","data":{"":"欢迎阅读 Next.js 文档！","什么是-nextjs#什么是 Next.js?":"Next.js 是一个用于构建全栈 web 应用的 React 框架。你可以使用 React 组件来构建用户界面，使用 Next.js 获得更多的功能和优化。在底层，Next.js 还抽象并自动配置了 React 所需的工具链，如打包、编译等。这使你可以专注于构建应用程序，而不需要花时间在配置上。无论你是个人开发者还是大型团队的一员，Next.js 都能帮助你构建交互式、动态和快速的 React 应用程序。","主要特性#主要特性":"Next.js 的一些主要特性包括：\n特性\t描述\t路由\t基于文件系统的路由，且建立在 Server Components 之上，支持布局、嵌套路由、加载状态、错误处理等功能\t渲染\t使用 Client 和 Server Components 进行客户端和服务器端渲染，通过 Next.js 在服务端的静态和动态渲然进一步优化。在 Edge 和 Node.js 运行时支持 Streaming.\t数据获取\t在 Server Components 中使用 async/await 简化了数据获取方式，以及扩展的 fetch API 用于请求缓存、数据缓存和重新验证。\t样式\t支持你选择样式方案，包括 CSS Modules，Tailwind CSS，和 CSS-in-JS。\t优化\tImage，Fonts 和 Script 优化以改善应用的 Core Web Vitals 和用户体验。\tTypeScript\t改进了对 TypeScript 的支持，包括更好的类型检查和更高效的编译，以及自定义 TypeScript 插件和类型检查器。","如何使用文档#如何使用文档":"在屏幕左侧，你会看到文档导航栏。文档页面按从基础到高级的顺序排列，因此你可以在构建应用程序时逐步阅读。不过，你也可以按照任何顺序阅读文档，或跳到适用于你的使用案例的页面。在屏幕右侧，你会看到一个目录，可以更方便地在页面各部分之间进行导航。如果需要快速查找页面，可以使用顶部的搜索栏或搜索快捷键（Ctrl+K 或 Cmd+K）。要开始使用，请查看 安装指南。","app-router-vs-pages-router#App Router vs Pages Router":"Next.js 有两种不同的路由: App Router 和 Pages Router。 App Router 是一种较新的路由，允许你使用 React 的最新功能，如 Server Components 和 Streaming。Pages Router 是最初的 Next.js 路由器, 允许你构建服务器渲染的 React 应用程序，并继续支持旧的 Next.js 应用程序.在侧边栏的顶部，你会发现一个下拉菜单，允许你在 App Router 和 Pages Router 之间切换。由于每个目录都有独特的功能，因此跟踪选择了哪个选项卡非常重要。页面顶部的面包屑也将指示你正在查看 App Router 文档还是 Pages Router 文档。","必备知识#必备知识":"虽然我们的文档旨在为初学者提供方便，但我们需要建立一个基准，以便文档能始终专注于 Next.js 功能。我们将确保在引入新概念时提供相关文档的链接。要充分利用我们的文档，建议你对 HTML、CSS 和 React 有基本的了解。如果你需要补习 React 技能，请查看我们的 Next.js 基础课程，它将为你介绍基础知识。","无障碍#无障碍":"为了在阅读文档时使用屏幕阅读器获得最佳辅助功能，我们建议使用 Firefox 和 NVDA，或 Safari 和 VoiceOver。","加入我们的社区#加入我们的社区":"如果您对 Next.js 有任何疑问，欢迎随时在 GitHub Discussions，Discord，Twitter 和 Reddit 上提问."}},"/":{"title":"Next.js","data":{}},"/learn/empty":{"title":"Empty","data":{"":"WIP..."}}}