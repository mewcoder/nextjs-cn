{"/docs/app":{"title":"App Router","data":{"":"App Router 是使用 React 最新特性来构建应用程序的新范式。如果你已经熟悉 Next.js 你会发现 App Router 是现有基于文件系统的路由在 Pages Router 中的自然演进。对于新的应用程序，我们推荐使用 App Router。对于现有应用程序，你可以 渐进地迁移到 App Router。本文档的这部分包括了 App Router 中的可用特性："}},"/docs/community/contribution-guide":{"title":"Docs Contribution Guide","data":{"":"Welcome to the Next.js Docs Contribution Guide! We're excited to have you here.This page provides instructions on how to edit the Next.js documentation. Our goal is to ensure that everyone in the community feels empowered to contribute and improve our docs.","why-contribute#Why Contribute?":"Open-source work is never done, and neither is documentation. Contributing to docs is a good way for beginners to get involved in open-source and for experienced developers to clarify more complex topics while sharing their knowledge with the community.By contributing to the Next.js docs, you're helping us build a more robust learning resource for all developers. Whether you've found a typo, a confusing section, or you've realized that a particular topic is missing, your contributions are welcomed and appreciated.","how-to-contribute#How to Contribute":"The docs content can be found on the Next.js repo. To contribute, you can edit the files directly on GitHub or clone the repo and edit the files locally.","github-workflow#GitHub Workflow":"If you're new to GitHub, we recommend reading the GitHub Open Source Guide to learn how to fork a repository, create a branch, and submit a pull request.\nGood to know: The underlying docs code lives in a private codebase that is synced to the Next.js public repo. This means that you can't preview the docs locally. However, you'll see your changes on nextjs.org after merging a pull request.","writing-mdx#Writing MDX":"The docs are written in MDX, a markdown format that supports JSX syntax. This allows us to embed React components in the docs. See the GitHub Markdown Guide for a quick overview of markdown syntax.","vscode#VSCode":"","previewing-changes-locally#Previewing Changes Locally":"VSCode has a built-in markdown previewer that you can use to see your edits locally. To enable the previewer for MDX files, you'll need to add a configuration option to your user settings.Open the command palette (⌘ + ⇧ + P on Mac or Ctrl + Shift + P on Windows) and search from Preferences: Open User Settings (JSON).Then, add the following line to your settings.json file:\n{\n  \"files.associations\": {\n    \"*.mdx\": \"markdown\"\n  }\n}\nNext, open the command palette again, and search for Markdown: Preview File or Markdown: Open Preview to the Side. This will open a preview window where you can see your formatted changes.","extensions#Extensions":"We also recommend the following extensions for VSCode users:\nMDX: Intellisense and syntax highlighting for MDX.\nGrammarly: Grammar and spell checker.\nPrettier: Format MDX files on save.","review-process#Review Process":"Once you've submitted your contribution, the Next.js or Developer Experience teams will review your changes, provide feedback, and merge the pull request when it's ready.Please let us know if you have any questions or need further assistance in your PR's comments. Thank you for contributing to the Next.js docs and being a part of our community!\nTip: Run pnpm prettier-fix to run Prettier before submitting your PR.","file-structure#File Structure":"The docs use file-system routing. Each folder and files inside /docs represent a route segment. These segments are used to generate the URL paths, navigation, and breadcrumbs.The file structure reflects the navigation that you see on the site, and by default, navigation items are sorted alphabetically. However, we can change the order of the items by prepending a two-digit number (00-) to the folder or file name.For example, in the functions API Reference, the pages are sorted alphabetically because it makes it easier for developers to find a specific function:\n03-functions\n├── cookies.mdx\n├── draft-mode.mdx\n├── fetch.mdx\n└── ...\nBut, in the routing section, the files are prefixed with a two-digit number, sorted in the order developers should learn these concepts:\n02-routing\n├── 01-defining-routes.mdx\n├── 02-pages-and-layouts.mdx\n├── 03-linking-and-navigating.mdx\n└── ...\nTo quickly find a page, you can use ⌘ + P (Mac) or Ctrl + P (Windows) to open the search bar on VSCode. Then, type the slug of the page you're looking for. E.g. defining-routes\nWhy not use a manifest?We considered using a manifest file (another popular way to generate the docs navigation), but we found that a manifest would quickly get out of sync with the files. File-system routing forces us to think about the structure of the docs and feels more native to Next.js.","metadata#Metadata":"Each page has a metadata block at the top of the file separated by three dashes.","required-fields#Required Fields":"The following fields are required:\nField\tDescription\ttitle\tThe page's <h1> title, used for SEO and OG Images.\tdescription\tThe page's description, used in the <meta name=\"description\"> tag for SEO.\t\n---\ntile: Page Title\ndescription: Page Description\n---\nIt's good practice to limit the page title to 2-3 words (e.g. Optimizing Images) and the description to 1-2 sentences (e.g. Learn how to optimize images in Next.js).","optional-fields#Optional Fields":"The following fields are optional:\nField\tDescription\tnav_title\tOverrides the page's title in the navigation. This is useful when the page's title is too long to fit. If not provided, the title field is used.\tsource\tPulls content into a shared page. See Shared Pages.\trelated\tA list of related pages at the bottom of the document. These will automatically be turned into cards. See Related Links.\t\n---\nnav_title: Nav Item Title\nsource: app/building-your-application/optimizing/images\nrelated:\n  description: See the image component API reference.\n  links:\n    - app/api-reference/components/image\n---","app-and-pages-docs#App and Pages Docs":"Since most of the features in the App Router and Pages Router are completely different, their docs for each are kept in separate sections (02-app and 03-pages). However, there are a few features that are shared between them.","shared-pages#Shared Pages":"To avoid content duplication and risk the content becoming out of sync, we use the source field to pull content from one page into another. For example, the <Link> component behaves mostly the same in App and Pages. Instead of duplicating the content, we can pull the content from app/.../link.mdx into pages/.../link.mdx:\n---\ntitle: <Link>\ndescription: API reference for the <Link> component.\n---\nThis API reference will help you understand how to use the props\nand configuration options available for the Link Component.\n---\ntitle: <Link>\ndescription: API reference for the <Link> component.\nsource: app/api-reference/components/link\n---\n{/* DO NOT EDIT THIS PAGE. */}\n{/* The content of this page is pulled from the source above. */}\nWe can therefore edit the content in one place and have it reflected in both sections.","shared-content#Shared Content":"In shared pages, sometimes there might be content that is App Router or Pages Router specific. For example, the <Link> component has a shallow prop that is only available in Pages but not in App.To make sure the content only shows in the correct router, we can wrap content blocks in an <AppOnly> or <PagesOnly> components:\nThis content is shared between App and Pages.\n<PagesOnly>\nThis content will only be shown on the Pages docs.\n</PagesOnly>\nThis content is shared between App and Pages.\nYou'll likely use these components for examples and code blocks.","code-blocks#Code Blocks":"Code blocks should contain a minimum working example that can be copied and pasted. This means that the code should be able to run without any additional configuration.For example, if you're showing how to use the <Link> component, you should include the import statement and the <Link> component itself.\nimport Link from 'next/link'\nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\nAlways run examples locally before committing them. This will ensure that the code is up-to-date and working.","language-and-filename#Language and Filename":"Code blocks should have a header that includes the language and the filename. Add a filename prop to render a special Terminal icon that helps orientate users where to input the command. For example:\n```bash filename=\"Terminal\"\nnpx create-next-app\n```\nMost examples in the docs are written in tsx and jsx, and a few in bash. However, you can use any supported language, here's the full list.When writing JavaScript code blocks, we use the following language and extension combinations.\n\tLanguage\tExtension\tJavaScript files with JSX code\t```jsx\t.js\tJavaScript files without JSX\t```js\t.js\tTypeScript files with JSX\t```tsx\t.tsx\tTypeScript files without JSX\t```ts\t.ts","ts-and-js-switcher#TS and JS Switcher":"Add a language switcher to toggle between TypeScript and JavaScript. Code blocks should be TypeScript first with a JavaScript version to accommodate users.Currently, we write TS and JS examples one after the other, and link them with switcher prop:\n```tsx filename=\"app/page.tsx\" switcher\n```\n```jsx filename=\"app/page.js\" switcher\n```\nGood to know: We plan to automatically compile TypeScript snippets to JavaScript in the future. In the meantime, you can use transform.tools.","line-highlighting#Line Highlighting":"Code lines can be highlighted. This is useful when you want to draw attention to a specific part of the code. You can highlight lines by passing a number to the highlight prop.Single Line: highlight={1}\nimport Link from 'next/link'\nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\nMultiple Lines: highlight={1,3}\nimport Link from 'next/link'\nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\nRange of Lines: highlight={1-5}\nimport Link from 'next/link'\nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}","icons#Icons":"The following icons are available for use in the docs:\n<Check size={18} />\n<Cross size={18} />\nOutput:We do not use emojis in the docs.","notes#Notes":"For information that is important but not critical, use notes. Notes are a good way to add information without distracting the user from the main content.\n> **Good to know**: This is a single line note.\n> **Good to know**:\n>\n> - We also use this format for multi-line notes.\n> - There are sometimes multiple items worth knowing or keeping in mind.\nOutput:\nGood to know: This is a single line note.\nGood to know:\nWe also use this format for multi-line notes.\nThere are sometimes multiple item worths knowing or keeping in mind.","related-links#Related Links":"Related Links guide the user's learning journey by adding links to logical next steps.\nLinks will be displayed in cards under the main content of the page.\nLinks will be automatically generated for pages that have child pages. For example, the Optimizing section has links to all of its child pages.\nCreate related links using the related field in the page's metadata.\n---\nrelated:\n  description: Learn how to quickly get started with your first application.\n  links:\n    - app/building-your-application/routing/defining-routes\n    - app/building-your-application/data-fetching\n    - app/api-reference/file-conventions/page\n---","nested-fields#Nested Fields":"Field\tRequired?\tDescription\ttitle\tOptional\tThe title of the card list. Defaults to Next Steps.\tdescription\tOptional\tThe description of the card list.\tlinks\tRequired\tA list of links to other doc pages. Each list item should be a relative URL path (without a leading slash) e.g. app/api-reference/file-conventions/page","diagrams#Diagrams":"Diagrams are a great way to explain complex concepts. We use Figma to create diagrams, following Vercel's design guide.The diagrams currently live in a /public folder in our private Next.js site. If you'd like to update or add a diagram, please open a GitHub issue with your ideas.","custom-components-and-html#Custom Components and HTML":"These are the React Components available for the docs: <Image /> (next/image), <PagesOnly />, <AppOnly />, <Cross />, and <Check />. We do not allow raw HTML in the docs besides the <details> tag.If you have ideas for new components, please open a GitHub issue.","style-guide#Style Guide":"This section contains guidelines for writing docs for those who are new to technical writing.","page-templates#Page Templates":"While we don't have a strict template for pages, there are page sections you'll see repeated across the docs:\nOverview: The first paragraph of a page should tell the user what the feature is and what it's used for. Followed by a minimum working example or its API reference.\nConvention: If the feature has a convention, it should be explained here.\nExamples: Show how the feature can be used with different use cases.\nAPI Tables: API Pages should have an overview table at the of the page with jump-to-section links (when possible).\nNext Steps (Related Links): Add links to related pages to guide the user's learning journey.\nFeel free to add these sections as needed.","page-types#Page Types":"Docs pages are also split into two categories: Conceptual and Reference.\nConceptual pages are used to explain a concept or feature. They are usually longer and contain more information than reference pages. In the Next.js docs, conceptual pages are found in the Building Your Application section.\nReference pages are used to explain a specific API. They are usually shorter and more focused. In the Next.js docs, reference pages are found in the API Reference section.\nGood to know: Depending on the page you're contributing to, you may need to follow a different voice and style. For example, conceptual pages are more instructional and use the word you to address the user. Reference pages are more technical, they use more imperative words like \"create, update, accept\" and tend to omit the word you.","voice#Voice":"Here are some guidelines to maintain a consistent style and voice across the docs:\nWrite clear, concise sentences. Avoid tangents.\nIf you find yourself using a lot of commas, consider breaking the sentence into multiple sentences or use a list.\nSwap out complex words for simpler ones. For example, use instead of utilize.\nBe mindful with the word this. It can be ambiguous and confusing, don't be afraid to repeat the subject of the sentence if unclear.\nFor example, Next.js uses React instead of Next.js uses this.\nUse an active voice instead of passive. An active sentence is easier to read.\nFor example, Next.js uses React instead of React is used by Next.js. If you find yourself using words like was and by you may be using a passive voice.\nAvoid using words like easy, quick, simple, just, etc. This is subjective and can be discouraging to users.\nAvoid negative words like don't, can't, won't, etc. This can be discouraging to readers.\nFor example, \"You can use the Link component to create links between pages\" instead of \"Don't use the <a> tag to create links between pages\".\nWrite in second person (you/your). This is more personal and engaging.\nUse gender-neutral language. Use developers, users, or readers, when referring to the audience.\nIf adding code examples, ensure they are properly formatted and working.\nWhile these guidelines are not exhaustive, they should help you get started. If you'd like to dive deeper into technical writing, check out the Google Technical Writing Course.Thank you for contributing to the docs and being part of the Next.js community!"}},"/docs/community":{"title":"Next.js 社区","data":{"":"Next.js 的每周下载量超过 400 万次，拥有遍布全球庞大而活跃的开发者社区。以下是你可以参与我们社区的一些方式：","贡献#贡献":"你可以通过以下几种方式贡献 Next.js 的开发：\n文档：建议改进或者编写新的章节，帮助我们的用户了解如何使用 Next.js。\n示例：通过创建新的示例或改进现有示例，帮助开发人员将 Next.js 与其他工具和服务集成。\n代码库：了解有关底层架构的更多信息，帮助修复漏洞和错误，并提出新功能建议。","讨论#讨论":"如果你有关于 Next.js 的问题，或希望帮助他人，欢迎随时加入对话：\nGitHub 讨论\nDiscord\nReddit","社交媒体#社交媒体":"关注 Next.js 在 Twitter 上的最新更新，并订阅 Vercel 的 YouTube 频道 获取 Next.js 的视频。","行为准则#行为准则":"我们致力于创建一个包容、热情的社区。因此，我们要求所有成员遵守我们的行为准则。该文档概述了我们对参与者行为的期望。我们邀请您阅读并帮助我们维持一个安全和相互尊重的环境."}},"/docs/getting-started/installation":{"title":"安装","data":{"":"系统要求：\nNode.js 16.14 或更高版本。\n支持 macOS，Windows（包括 WSL）和 Linux。","自动安装#自动安装":"我们建议使用create-next-app创建一个新的 Next.js 应用，它会为你自动设置好所有东西。要创建一个项目，请运行：\nnpx create-next-app@latest\n在安装时，将看到以下提示：\nWhat is your project named? my-app\nWould you like to use TypeScript? No / Yes\nWould you like to use ESLint? No / Yes\nWould you like to use Tailwind CSS? No / Yes\nWould you like to use `src/` directory? No / Yes\nWould you like to use App Router? (recommended) No / Yes\nWould you like to customize the default import alias? No / Yes\nWhat import alias would you like configured? @/*\n在提示之后，create-next-app将创建一个指定项目名称的文件夹，并安装所需的依赖项。\n值得知道:\nNext.js 现在默认有 TypeScript、ESLint 和 Tailwind CSS配置。\n你可以选择性地在项目的根目录中使用 src目录，将应用程序的代码与配置文件分开。","手动安装#手动安装":"要手动创建新的 Next.js 应用，请安装所需的包：\nnpm install next@latest react@latest react-dom@latest\n打开 package.json文件并添加以下 scripts:\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}\n这些脚本涉及开发应用的不同阶段：\ndev: 运行next dev以在开发模式下启动 Next.js。\nbuild: 运行next build以构建用于生产使用的应用。\nstart: 运行next start以启动 Next.js 生产服务器。\nlint: 运行next lint以设置 Next.js 的内置 ESLint 配置。","创建目录#创建目录":"Next.js 使用文件系统路由，这意味着应用程序中的路由根据构建文件的方式决定。","app-目录#app 目录":"对于新的应用程序，我们建议使用 App 路由。 该路由方式允许你使用 Rreact 的最新特性而且是 Pages 路由 基于社区反馈的演进.创建 app/ 文件夹, 然后添加 layout.tsx 和 page.tsx 文件。 当用户访问应用程序的根路径 (/)将会呈现已下内容。\nCreate a root layout inside app/layout.tsx with the required <html> and <body> tags:\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}\nFinally, create a home page app/page.tsx with some initial content:\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>;\n}\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>;\n}\nGood to know: If you forget to create layout.tsx, Next.js will automatically create this file when running the development server with next dev.\nLearn more about using the App Router.","the-pages-directory-optional#The pages directory (optional)":"If you prefer to use the Pages Router instead of the App Router, you can create a pages/ directory at the root of your project.Then, add an index.tsx file inside your pages folder. This will be your home page (/):\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>;\n}\nNext, add an _app.tsx file inside pages/ to define the global layout. Learn more about the custom App file).\nimport type { AppProps } from \"next/app\";\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />;\n}\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />;\n}\nFinally, add a _document.tsx file inside pages/ to control the initial response from the server. Learn more about the custom Document file.\nimport { Html, Head, Main, NextScript } from \"next/document\";\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\nLearn more about using the Pages Router.\nGood to know: Although you can use both routers in the same project, routes in app will be prioritized over pages. We recommend using only one router in your new project to avoid confusion.","the-public-folder-optional#The public folder (optional)":"Create a public folder to store static assets such as images, fonts, etc. Files inside public directory can then be referenced by your code starting from the base URL (/).","run-the-development-server#Run the Development Server":"Run npm run dev to start the development server.\nVisit http://localhost:3000 to view your application.\nEdit app/layout.tsx (or pages/index.tsx) file and save it to see the updated result in your browser."}},"/docs/getting-started/project-structure":{"title":"Next.js 项目结构","data":{"":"本页概述了 Next.js 项目的文件和文件夹结构。它包括顶层文件和文件夹、配置文件以及应用程序和页面目录中的路由约定。","顶层文件夹#顶层文件夹":"app\tApp Router\tpages\tPages Router\tpublic\t静态资源\tsrc\t可选的 src 文件夹","顶层文件#顶层文件":"Next.js\t\tnext.config.js\tNext.js 配置文件\tpackage.json\t项目依赖和脚本\tinstrumentation.ts\tOpenTelemetry and Instrumentation file\tmiddleware.ts\tNext.js 请求中间件\t.env\t环境变量\t.env.local\t本地环境变量\t.env.production\t生产环境变量\t.env.development\t开发环境变量\t.eslintrc.json\tESLint 配置文件\t.gitignore\tGit 忽略配置文件\t.next-env.d.ts\tNext.js TypeScript 声明文件\ttsconfig.json\tTypeScript 配置文件\tjsconfig.json\tJavaScript 配置文件\tpostcss.config.js\tTailwind CSS 配置文件","app-路由约定#app 路由约定":"","路由文件#路由文件":"layout\t.js .jsx .tsx\t布局\tpage\t.js .jsx .tsx\t页面\tloading\t.js .jsx .tsx\t加载页面\tnot-found\t.js .jsx .tsx\t404 页面\terror\t.js .jsx .tsx\t错误 页面\tglobal-error\t.js .jsx .tsx\t全局 页面\troute\t.js .ts\tAPI endpoint\ttemplate\t.js .jsx .tsx\t重新渲染的布局\tdefault\t.js .jsx .tsx\t并行路由回退页面","嵌套路由#嵌套路由":"folder\t路由段\tfolder/folder\t嵌套路由段","动态路由#动态路由":"[folder]\t动态路由段\t[...folder]\t全匹配路由段\t[[...folder]]\t可选全匹配路由段","路由分组和私有文件夹#路由分组和私有文件夹":"(folder)\t对路由进行分组而不影响路由本身\t_folder\t将文件夹和所有子段标记为私有的,不参与路由匹配","并行和拦截路由#并行和拦截路由":"@folder\t命名插槽\t(.)folder\t拦截同级路由\t(..)folder\t拦截上一级路由\t(..)(..)folder\t拦截上两级路由\t(...)folder\t从根路由开始拦截","metadata-文件约定#Metadata 文件约定":"","应用图标#应用图标":"favicon\t.ico\t网站图标文件\ticon\t.ico .jpg .jpeg .png .svg\t应用图标文件\ticon\t.js .ts .tsx\t生成的应用图标文件\tapple-icon\t.jpg .jpeg, .png\tApple 应用图标文件\tapple-icon\t.js .ts .tsx\t生成的 Apple 应用图标文件","open-graph-and-twitter-图片#Open Graph and Twitter 图片":"opengraph-image\t.jpg .jpeg .png .gif\tOpen Graph 图片文件\topengraph-image\t.js .ts .tsx\t生成的 Open Graph 图片文件\ttwitter-image\t.jpg .jpeg .png .gif\tTwitter 图片文件\ttwitter-image\t.js .ts .tsx\t生成的 Twitter 图片文件","seo#SEO":"sitemap\t.xml\tSitemap 文件\tsitemap\t.js .ts\t生成的 Sitemap 文件\trobots\t.txt\tRobots 文件\trobots\t.js .ts\t生成的 Robots 文件","pages-路由约定#pages 路由约定":"","特殊文件#特殊文件":"_app\t.js .jsx .tsx\t定制 App\t_document\t.js .jsx .tsx\t定制 Document\t_error\t.js .jsx .tsx\t定制 错误页面\t404\t.js .jsx .tsx\t404 错误页面\t500\t.js .jsx .tsx\t500 错误页面","路由#路由":"文件夹约定\t\t\tindex\t.js .jsx .tsx\t主页面\tfolder/index\t.js .jsx .tsx\t嵌套页面\t文件约定\t\t\tindex\t.js .jsx .tsx\t主页面\tfile\t.js .jsx .tsx\t嵌套页面","动态路由-1#动态路由":"文件夹约定\t\t\t[folder]/index\t.js .jsx .tsx\t动态路由段\t[...folder]/index\t.js .jsx .tsx\t全捕获路由段\t[[...folder]]/index\t.js .jsx .tsx\t可选全捕获路由段\t文件约定\t\t\t[file]\t.js .jsx .tsx\t动态路由段\t[...file]\t.js .jsx .tsx\t全捕获路由段\t[[...file]]\t.js .jsx .tsx\t可选全捕获路由段"}},"/docs":{"title":"简介","data":{"":"欢迎阅读 Next.js 文档！","什么是-nextjs#什么是 Next.js?":"Next.js 是一个用于构建全栈 web 应用的 React 框架。你可以使用 React 组件来构建用户界面，使用 Next.js 获得更多的功能和优化。在底层，Next.js 还抽象并自动配置了 React 所需的工具链，如打包、编译等。这使你可以专注于构建应用程序，而不需要花时间在配置上。无论你是个人开发者还是大型团队的一员，Next.js 都能帮助你构建交互式、动态和快速的 React 应用程序。","主要特性#主要特性":"Next.js 的一些主要特性包括：\n特性\t描述\t路由\t基于文件系统的路由，且建立在 Server Components 之上，支持布局、嵌套路由、加载状态、错误处理等功能\t渲染\t使用 Client 和 Server Components 进行客户端和服务器端渲染，通过 Next.js 在服务端的静态和动态渲然进一步优化。在 Edge 和 Node.js 运行时支持 Streaming.\t数据获取\t在 Server Components 中使用 async/await 简化了数据获取方式，以及扩展的 fetch API 用于请求缓存、数据缓存和重新验证。\t样式\t支持你选择样式方案，包括 CSS Modules，Tailwind CSS，和 CSS-in-JS。\t优化\tImage，Fonts 和 Script 优化以改善应用的 Core Web Vitals 和用户体验。\tTypeScript\t改进了对 TypeScript 的支持，包括更好的类型检查和更高效的编译，以及自定义 TypeScript 插件和类型检查器。","如何使用文档#如何使用文档":"在屏幕左侧，你会看到文档导航栏。文档页面按从基础到高级的顺序排列，因此你可以在构建应用程序时逐步阅读。不过，你也可以按照任何顺序阅读文档，或跳到适用于你的使用案例的页面。在屏幕右侧，你会看到一个目录，可以更方便地在页面各部分之间进行导航。如果需要快速查找页面，可以使用顶部的搜索栏或搜索快捷键（Ctrl+K 或 Cmd+K）。要开始使用，请查看 安装指南。","app-router-vs-pages-router#App Router vs Pages Router":"Next.js 有两种不同的路由: App Router 和 Pages Router。 App Router 是一种较新的路由，允许你使用 React 的最新功能，如 Server Components 和 Streaming。Pages Router 是最初的 Next.js 路由器, 允许你构建服务器渲染的 React 应用程序，并继续支持旧的 Next.js 应用程序.在侧边栏的顶部，你会发现一个下拉菜单，允许你在 App Router 和 Pages Router 之间切换。由于每个目录都有独特的功能，因此跟踪选择了哪个选项卡非常重要。页面顶部的面包屑也将指示你正在查看 App Router 文档还是 Pages Router 文档。","必备知识#必备知识":"虽然我们的文档旨在为初学者提供方便，但我们需要建立一个基准，以便文档能始终专注于 Next.js 功能。我们将确保在引入新概念时提供相关文档的链接。要充分利用我们的文档，建议你对 HTML、CSS 和 React 有基本的了解。如果你需要补习 React 技能，请查看我们的 Next.js 基础课程，它将为你介绍基础知识。","无障碍#无障碍":"为了在阅读文档时使用屏幕阅读器获得最佳辅助功能，我们建议使用 Firefox 和 NVDA，或 Safari 和 VoiceOver。","加入我们的社区#加入我们的社区":"如果您对 Next.js 有任何疑问，欢迎随时在 GitHub Discussions，Discord，Twitter 和 Reddit 上提问."}},"/docs/instructions":{"title":"翻译说明","data":{"":"最近在学习 Next.js，发现社区好像并没有对应的文档翻译，所以自己尝试一下翻译。Next.js 官网文档的源码是私有的，所以只能自己开发，当前的网站基于 Nextra 进行开发，能实现官网文档的基本功能。App Router 和 Pages Router 的内容暂时没有翻译，数量有点多😰其他的已翻译完毕😀还未实现的:\n目录支持 切换 App Router 和 Page Router\n搜索支持 切换 App Router 和 Page Router\nApp Router 和 Pages Router 之间复用页面 以及 <AppOnly> 和 <PagesOnly> 区分内容\n原文档的仓库地址\n.\r\n│  index.mdx\r\n│\r\n├─01-getting-started\r\n│      01-installation.mdx\r\n│      02-project-structure.mdx\r\n│      index.mdx\r\n│\r\n├─02-app\r\n│  │  index.mdx\r\n│  │\r\n│  ├─01-building-your-application(54-51) // (文件数量-大于1kb的数量)\r\n│  │\r\n│  └─02-api-reference(83-62)\r\n│\r\n├─03-pages\r\n│  │  index.mdx\r\n│  │\r\n│  ├─01-building-your-application(69-37)\r\n│  │\r\n│  └─02-api-reference(50-10)\r\n│\r\n├─04-architecture\r\n│      accessibility.mdx\r\n│      fast-refresh.mdx\r\n│      index.mdx\r\n│      nextjs-compiler.mdx\r\n│      supported-browsers.mdx\r\n│      turbopack.mdx\r\n│\r\n└─05-community\r\n        01-contribution-guide.mdx\r\n        index.mdx"}},"/docs/pages":{"title":"Pages Router","data":{"":"在 Next.js 13 之前，Pages Router 是在 Next.js 中创建路由的主要方式。它使用文件系统路由器将每个文件映射到路由。Pages Router 在较新版本的 Next.js 中仍然支持，但我们建议迁移到新的 App Router 以使用 React 的最新特性。对于使用 Pages Router 的现有应用程序，请使用文档的此部分。"}},"/":{"title":"Next.js","data":{}},"/learn/empty":{"title":"Empty","data":{"":"WIP..."}}}